import streamlit as st
import pandas as pd
import datetime
from data_fetcher import get_stock_data  # âœ… Import function from data_fetcher.py

# âœ… Streamlit UI Setup
st.title("ğŸ“ˆ Real-Time Stock Market Dashboard")

# âœ… User selects a timezone BEFORE fetching data
timezone = st.radio("Select Timezone:", ["US/Eastern", "US/Central"], key="timezone_selector")

# âœ… User selects a stock
ticker = st.selectbox("Select a stock", ["AAPL", "TMUS", "NVDA"], key="stock_selector")

# âœ… Fetch data (calls get_stock_data from data_fetcher.py)
df = get_stock_data(ticker, timezone)

# âœ… Ensure it defaults to todayâ€™s date or latest available stock data
default_start_date = df["Datetime"].max().date() if not df.empty else datetime.date.today()
default_end_date = df["Datetime"].max().date() if not df.empty else datetime.date.today()

start_date = st.date_input("Start Date", default_start_date)
end_date = st.date_input("End Date", default_end_date)

# âœ… Filter dataframe based on selected dates
df_filtered = df[(df["Datetime"].dt.date >= start_date) & (df["Datetime"].dt.date <= end_date)]

# âœ… Display Timezone & Stock Selection
st.write(f"Timezone: {timezone}")
st.write(f"Showing latest data for {ticker} from {start_date} to {end_date}")

# âœ… Stock Price Line Chart
st.line_chart(df_filtered.set_index("Datetime")["Close"])

# âœ… Stock Volume Bar Chart
st.subheader("ğŸ“Š Stock Volume Over Time")
st.bar_chart(df_filtered.set_index("Datetime")["Volume"])

# âœ… Refresh Button to Clear Cache
if st.button("ğŸ”„ Refresh Data"):
    st.cache_data.clear()
